
params {
    /* Init
    -------------------------------------------------------------------------- */
    csv   = ""
    reads = "" // TODO: Create a script to scan directories without the need for a CSV file

    /* Fastp for Pre-processing (Trimming and base quality corrections)
    -------------------------------------------------------------------------- */
    skipFastqPrep = false
    saveTrimmedFastq = true
    trimmedFastqCompression = 6
    trackDiscardedReads = false

    // Base quality filtering
    baseQuality = 10
    requiredQualityBases = 0.6 // Note: fastP wants the number tha fail (so 1-passed) where passed = requiredQualityBases
    unknownBaseLimit = 5 // Default: 5
    disableBaseQualityFilter = false

    // Base quality correction by overlap analysis
    defineOverlapLength = null // Default: 30
    defineOverlapDifferenceNumber = null // Default: 5
    defineOverlapPercentDiffernce = null // Default: 20%
    enableBaseCorrectionByOverlap = false

    // Adapter trimming
    autoDetectAdapters = false
    adapterFasta = null
    adapterSequence = null
    adapterSequence2 = null
    disableAdapterTrimming = false

    // Duplicates
    removeDuplicates = false
    disableDuplicationEval = false
    duplicateSearchAccuracy = 3 // Scale 1 to 6 where 6 is most acurate but more resource/time. Defaut: 3

    // Length filter
    enableLengthFilter = false
    minReadLength = null // Note: kmer length is the absolute minimum we can do for a length
    maxReadLength = 0 // Default 0 meaning no limit

    // overrepresented sequence analysis
    disableRepresentedSeqAnalysis = false
    representedSeqSamplingRate = null // Sample every `1/representedSeqSamplingRate` reads. Default: 20

    /* Salmon Index
    -------------------------------------------------------------------------- */
    genome = null
    transcriptome = null
    kmer = 31
    gencode = false
    index = null

    /* Salmon Quant
    -------------------------------------------------------------------------- */
    // Mapping inputs
    single   = false
    mean     = null
    sd       = null
    libtype  = null

    // Mapping mode
    allowDovetail = false
    disableOrphanRecovery = false
    salmonClip = false
    salmonClipOverhangs = false
    mismatchSkipNumber = null // Default: 3
    seqSimilarityThreshold = null // Default 10000
    readOccuranceThreshold = null // Default: 200
    noChainingLimit = false
    minQualityScore = null // Default: 0.65

    // Biases
    disableGCBiasCorrection = false
    disableHexamerBiasCorrection = false
    disablePositionBiasCorrection = false

    // Quantification with VB algorithm
    incompatProbability = null // Default: 0
    factorization = 4 // Default: 4

    // Sampling posterior
    gibbs = 25 // Defaut: 0
    disableGammaDraw = false
    thinningFactor = null // Default: 16
    bootstraps = 0 // Default: 0

    // Output
    bam = false
    keepSam = false
    writeUnmapped = false
    unmappedWithQualityStrings = false
    writeOrphans = false

    /* Terminus
    -------------------------------------------------------------------------- */
    groupMinPosteriorSpread = null
    terminusWeighttolerance = null
    terminusSeed = 1
    minSamplesForCollapse = 0.5 // 50% of samples must have the group
}

// Settigns for individual processes involved in RNA-Seq workflow
// Note: the ext.args is used to add custom parameters to the called processes. Basically,
//          this string is added to the end of the main command called in that process/
process {
    withName: FASTP {
        ext.enableCache = (params.disableCache == false)
        ext.outSubDir = "fastq"
        ext.trimSuffix = ".trimmed"
        if (params.saveTrimmedFastq == false) {
            publishDir = [enabled: false]
        }
        ext.trackDiscardedReads = params.trackDiscardedReads
        ext.args =
            [
                "--compression $params.trimmedFastqCompression",
                // Base quality
                params.disableBaseQualityFilter ? "--disable_quality_filtering" : "",
                params.baseQuality ? "--qualified_quality_phred $params.baseQuality" : "",
                // Note, the unqualified_percent_limit flat has to be an interger, so we format it as one
                params.requiredQualityBases ? "--unqualified_percent_limit ${String.format('%.0f', 100*(1 - params.requiredQualityBases))}" : "",
                params.unknownBaseLimit ? "--n_base_limit $params.unknownBaseLimit" : "",
                // Base quality correction by overlap analysis
                params.enableBaseCorrectionByOverlap ? "--correction" : "",
                params.defineOverlapDifferenceNumber ? "--overlap_diff_limit $params.defineOverlapDifferenceNumber" : "",
                params.defineOverlapPercentDiffernce ? "--overlap_diff_percent_limit $params.defineOverlapPercentDiffernce" : "",
                params.defineOverlapLength ? "--overlap_len_require $params.defineOverlapLength" : "",
                // Adapter trimming
                params.disableAdapterTrimming ? "--disable_adapter_trimming" : "",
                params.autoDetectAdapters ? "--detect_adapter_for_pe" : "",
                params.adapterFasta ? "--adapter_fasta $params.adapterFasta" : "",
                params.adapterSequence ? "--adapter_sequence $params.adapterSequence" : "",
                params.adapterSequence2 ? "--adapter_sequence_r2 $params.adapterSequence2" : "",
                // Duplicates
                params.disableDuplicationEval ? "--dont_eval_duplication" : "",
                params.removeDuplicates ? "--dedup" : "",
                params.duplicateSearchAccuracy ? "--dup_calc_accuracy $params.duplicateSearchAccuracy" : "",
                // Length
                params.enableLengthFilter ? "" : "--disable_length_filtering",
                params.minReadLength != null ? "--length_required $params.minReadLength" : "",
                params.maxReadLength != null ? "--length_limit $params.maxReadLength" : "",
                // Overrepresentation analysis
                params.disableRepresentedSeqAnalysis ? "" : "--overrepresentation_analysis",
                params.representedSeqSamplingRate ? "--overrepresentation_sampling $params.representedSeqSamplingRate" : ""
            ].join(' ').trim()

    }
    withName: SALMON_INDEX {
        ext.enableCache = (params.disableCache == false)
        ext.outSubDir = "genome-transcriptome"
        ext.excludeOut = ["salmon-index"]
        ext.args =
            [
                "-k $params.kmer",
                params.gencode ? "--gencode" : ""
            ].join(' ').trim()
    }
    withName: TAR_SALMON_QUANT {
        ext.outSubDir = "salmon-quant"
    }
    withName: SALMON_QUANT {
        publishDir = [enabled: false]
        ext.outSam = (params.writeUnmapped || params.bam)
        ext.args =
            [
                params.libtype ? "--libType=$params.libtype" : "",
                // Mapping
                params.minQualityScore ? "--minScoreFraction $params.minQualityScore" : "",
                params.allowDovetail ? "--allowDovetail" : "",
                params.disableOrphanRecovery ? "" : "--recoverOrphans",
                params.salmonClip ? "--softclip" : "",
                params.salmonClipOverhangs ? "--softclipOverhangs" : "",
                params.mismatchSkipNumber ? "--mismatchSeedSkip $params.mismatchSkipNumber" : "",
                params.seqSimilarityThreshold ? "--maxOccsPerHit $params.seqSimilarityThreshold" : "",
                params.readOccuranceThreshold ? "--maxReadOcc $params.readOccuranceThreshold" : "",
                params.noChainingLimit ? "--disableChainingHeuristic" : "",
                // Bias Models
                params.disableGCBiasCorrection ? "" : "--gcBias",
                params.disableHexamerBiasCorrection ? "" : "--seqBias",
                params.disablePositionBiasCorrection ? "" : "--posBias",
                // Quantification
                params.incompatProbability ? "--incompatPrior $params.incompatProbability" : "",
                params.factorization ? "--rangeFactorizationBins $params.factorization" : "",
                // Posterior
                (params.gibbs > 0) ? "--numGibbsSamples $params.gibbs" : "",
                params.disableGammaDraw ? "--noGammaDraw" : "",
                params.thinningFactor ? "--thinningFactor $params.thinningFactor" : "",
                (params.bootstraps > 0) ? "--numBootstraps $params.bootstraps" : "",
                // Output
                params.writeUnmapped ? "--writeUnmappedNames" : "",
                params.unmappedWithQualityStrings ? "--writeQualities" : "",
                params.writeOrphans ? "--writeOrphanLinks" : ""
            ].join(' ').trim()
    }
    withName: SAMTOOLS_VIEW_SALMON_ALIGNMENT {
        ext.enableCache = (params.disableCache == false)
        ext.outSubDir = "salmon-alignment"
        ext.fileSuffix = ".unsorted"
        if (params.keepSam == false) {
            // Read the symlink to find the true path and remove it
            afterScript = { "rm \$(readlink $sam_file)" }
        }
    }
    withName: TERMINUS_GROUP {
        ext.enableCache = (params.disableCache == false)
        publishDir = [enabled: false]
        ext.args =
            [
                params.groupMinPosteriorSpread ? "-m $params.groupMinPosteriorSpread" : "",
                params.terminusWeighttolerance ? "--tolerance $params.terminusWeighttolerance" : "",
                params.terminusSeed != null ? "--seed $params.terminusSeed" : ""
            ].join(' ').trim()

    }
    withName: TERMINUS_COLLAPSE {
        ext.enableCache = (params.disableCache == false)
        publishDir = [enabled: false]
        ext.args = { params.minSamplesForCollapse ? "-c $params.minSamplesForCollapse" : "" }
    }
    withName: TAR_TERMINUS {
        ext.outSubDir = "terminus"
    }
    withName: TXIMETA_FISHPOND {
        ext.enableCache = (params.disableCache == false)
        ext.outSubDir = "salmon"
    }
}
