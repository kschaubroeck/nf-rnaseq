// Import useful classes
import java.nio.file.Paths

// Command line args for saving output and caching data
params {
    // Where to store published data and how to name the data
    outDir = null
    outPrefix = null
    publishMode = null

    // Where to store cache and how to manage it's lifecycle
    cacheDir = null
    cachePrefix = null
}

// We are going to do a check and see if the params.outPrefix is null If so, we are going
// to substitute it for the current date. The user can disable this option by setting a
// custom prefix or have no prefix by using a blank string
if (params.outPrefix == null) {
    params.outPrefix = new Date().format('yyyy-MM-dd-')
}

// If the cache prefix is null, we will assume the user only wants to keep their cache for
// the current day. The user can keep the cache forever if they set the prefix to blank
if (params.cachePrefix == null) {
    params.cachePrefix = new Date().format('yyyy-MM-dd')
}

// Now make sure
process {
    storeDir = {
        if (task.ext.enableCache != null && task.ext.enableCache == true) {
            Paths.get(
                (params.cacheDir != null ? params.cacheDir : launchDir + "/.cache").toString(),
                (params.cachePrefix != null ? params.cachePrefix : "").toString(),
                (task.process ?: "").toString(),
                (task.ext.cacheID ?: "").toString()
            )
        }
    }
    publishDir = [
        path: {
            Paths.get(
                (params.outDir != null ? params.outDir : launchDir + "/output").toString(),
                (task.ext.outSubDir ? (params.outPrefix ?: "") + task.ext.outSubDir : "").toString()
            )
        },
        mode: params.publishMode ?: "copy",
        saveAs: {
            // Get the supplied naming scheme
            name = it
            if (task.ext.fileName != null) {
                if (task.ext.fileName instanceof List && task.ext.fileName.containsKey(it)) {
                    name = task.ext.fileName.get(it).toString()
                } else {
                    name = task.ext.fileName.toString()
                }
            }

            // Check if this piece of data is meant to be excluded
            if ((task.ext.excludeOut ?: []).contains(name)) {
                return ""
            }

            // Get default values set for the process
            subDir = task.ext.outSubDir ? "" : (params.outPrefix ?: "")
            filePrefix = task.ext.filePrefix ?: ""
            extension = task.ext.fileExtension != null ? "." + task.ext.fileExtension : ""
            suffix =
                task.ext.fileSuffix
                ? (
                    name.indexOf(".") != -1
                        ? name.substring(0, name.indexOf(".")) + task.ext.fileSuffix + name.substring(name.indexOf("."))
                        : name + task.ext.fileSuffix
                  )
                : name

            // Assemble name. Note, suffix contains the full file name (with the suffix)
            subDir.toString() + filePrefix.toString() + suffix.toString() + extension.toString()
        }
    ]
}

