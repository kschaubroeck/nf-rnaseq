
params {
    attempts = 3

    // Process defaults
    cpus     = 1
    memory   = 1
    time     = 1

    // Processes with low resource needs but more than default
    lowCpus = 2
    lowMemory = 6
    lowTime = 4

    // Processes with medium resource needs
    mediumCpus = 6
    mediumMemory = 36
    mediumTime = 8

    // Processes with high resource needs
    highCpus = 12
    highMemory = 72
    highTime = 16

    // Settings for one-off needs
    manyCpus= 20
    longDuration = 20
}


process {
    // Set retry conditions so the number of attempts is limited and only retries on resource related errors
    maxRetries = params.attempts
    errorStrategy = { task.exitStatus in 137..140 ? 'retry' : 'terminate' }

    // Proccess default resource use
    cpus   = { 1      * params.cpus   * task.attempt }
    time   = { 1.hour * params.time   * task.attempt }
    memory = { 1.GB   * params.memory * task.attempt }

    // For a process with low computational needs
    withLabel: process_low_resources {
        cpus   = { 1      * params.lowCpus   * task.attempt }
        time   = { 1.hour * params.lowTime   * task.attempt }
        memory = { 1.GB   * params.lowMemory * task.attempt }
    }

    // For a process with medium computational needs
    withLabel: process_medium_resources {
        cpus   = { 1      * params.mediumCpus   * task.attempt }
        time   = { 1.hour * params.mediumTime   * task.attempt }
        memory = { 1.GB   * params.mediumMemory * task.attempt }
    }

    // For a process with high computational needs
    withLabel: process_high_resources {
        cpus   = { 1      * params.highCpus   * task.attempt }
        time   = { 1.hour * params.highTime   * task.attempt }
        memory = { 1.GB   * params.highMemory * task.attempt }
    }

    // Processes that need only more of one (time, memory, cpus)
    withLabel: process_long_duration {
        time   = { 1.hour * params.longDuration * task.attempt }
    }

    // Process that needs many cpus (for threading)
    withLabel: process_many_cpus {
        cpus   =  { 1 * params.manyCpus * task.attempt }
    }
}
